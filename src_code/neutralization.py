# -*- coding: utf-8 -*-
"""Neutralization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tAbnhGyETZFzynm3-czfwHeZumCSA22u
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import gdown
# **Step 1: Load Dataset**
file_id = "1ZbR2jioaBxLJEBHQ3OWdbOcRBrdKjRx2"
gdown.download(f"https://drive.google.com/uc?id={file_id}", "dataset.csv", quiet=False)

df = pd.read_csv("dataset.csv")

#file_path = "indian_coal_mining_updated.csv"
#df = pd.read_csv(file_path)

# **Step 2: Define Feature Selection Function**
def prepare_data():
    # Selecting relevant features for strategy prediction
    features = ["CO2_Emissions_MtCO2e", "Carbon_Credits_Earned", "Reduction",
                "Coal_Consumption_Mt", "FuelType", "Excavation", "Transportation", "Mitigation_Strategies"]
    target = "Mitigation_Strategies"

    # Selecting the dataset
    X = df[features]
    y = df[target]

    # Encoding categorical target variable
    y_encoded, strategy_mapping = pd.factorize(y)

    # Save strategy mapping for decoding predictions
    joblib.dump(strategy_mapping, "neutralization_strategy_mapping.pkl")

    # Identifying categorical and numerical columns
    categorical_features = ["FuelType"]
    numerical_features = list(set(features) - set(categorical_features) - {"Mitigation_Strategies"})

    # Preprocessing pipelines
    num_pipeline = StandardScaler()
    cat_pipeline = OneHotEncoder(handle_unknown="ignore")

    preprocessor = ColumnTransformer([
        ("num", num_pipeline, numerical_features),
        ("cat", cat_pipeline, categorical_features)
    ])

    # Splitting the dataset (80% training, 20% testing)
    X_train, X_test, y_train, y_test = train_test_split(X.drop(columns=["Mitigation_Strategies"]),
                                                        y_encoded, test_size=0.2, random_state=42, stratify=y_encoded)

    # Fitting and transforming preprocessing
    X_train = preprocessor.fit_transform(X_train)
    X_test = preprocessor.transform(X_test)

    # Save the preprocessor
    joblib.dump(preprocessor, "neutralization_preprocessor.pkl")

    return X_train, X_test, y_train, y_test, strategy_mapping

# **Step 3: Train ML Model for Strategy Recommendation**
def train_strategy_model():
    print("ðŸ”¹ Training Neutralization Strategy Model...")

    X_train, X_test, y_train, y_test, strategy_mapping = prepare_data()

    # Train Random Forest Classifier
    model = RandomForestClassifier(n_estimators=300, max_depth=10, random_state=42, class_weight="balanced")
    model.fit(X_train, y_train)

    # Save model
    joblib.dump(model, "neutralization_strategy_rf.pkl")

    # Evaluate Model
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"âœ… Model trained successfully with Accuracy: {accuracy:.2f}")

# **Step 4: Take User Input for Strategy Prediction**
def get_user_input():
    print("\nðŸ”¹ Enter mining operation details:")
    co2_emission = float(input("COâ‚‚ Emissions (metric tons): "))
    carbon_credits = float(input("Carbon Credits Earned: "))
    reduction = float(input("Emission Reduction (%): "))
    coal_consumption = float(input("Coal Consumption (million tons): "))
    fuel_type = input("Fuel Type (Coal/Diesel/Gas): ")
    excavation = float(input("Excavation Volume (thousand mÂ³): "))
    transportation = float(input("Transportation Distance (km): "))

    return pd.DataFrame([[co2_emission, carbon_credits, reduction, coal_consumption, fuel_type, excavation, transportation]],
                        columns=["CO2_Emissions_MtCO2e", "Carbon_Credits_Earned", "Reduction",
                                 "Coal_Consumption_Mt", "FuelType", "Excavation", "Transportation"])

# **Step 5: Predict the Best Neutralization Strategy**
def predict_neutralization_strategy():
    user_input = get_user_input()

    # Load trained model & preprocessor
    model = joblib.load("neutralization_strategy_rf.pkl")
    preprocessor = joblib.load("neutralization_preprocessor.pkl")
    strategy_mapping = joblib.load("neutralization_strategy_mapping.pkl")

    # Preprocess user input
    user_input_transformed = preprocessor.transform(user_input)

    # Predict the best strategy
    predicted_strategy_index = model.predict(user_input_transformed)[0]
    recommended_strategy = strategy_mapping[predicted_strategy_index]

    print(f"\nðŸ”¹ **Recommended Neutralization Strategy:** {recommended_strategy}")

# **Step 6: Visualize Strategy Effectiveness**
def visualize_strategy_trends():
    plt.figure(figsize=(10, 6))
    sns.boxplot(x="Mitigation_Strategies", y="Reduction", data=df, palette="coolwarm")
    plt.title("Effectiveness of Neutralization Strategies")
    plt.xticks(rotation=45)
    plt.show()

# **Step 7: Run Program**
if __name__ == "__main__":
   # train_strategy_model()  # Train the model (Only run this once)
    predict_neutralization_strategy()  # Predict the best strategy based on user input
    visualize_strategy_trends()  # Show Strategy Effectiveness trends